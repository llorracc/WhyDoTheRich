%!PS-Adobe-2.0 EPSF-1.2%%BoundingBox: 0 0 433 267%%HiResBoundingBox: 0 0 433 267.5%%Creator: (Mathematica Macintosh 3.0)%%Title: Clipboard%%CreationDate: (Tuesday, July 1, 1997) (2:10:42 PM)%%DocumentNeededResources: (atend)%%DocumentFonts: (atend)%%DocumentNeededFonts: (atend)%%EndCommentsgsave150 dict begin/Mfixwid true def/Mrot 0 def/Mpstart {    MathPictureStart} bind def/Mpend {    MathPictureEnd} bind def/Mscale {    0 1 0 1    5 -1 roll    MathScale} bind def/Plain	/Courier findfont def/Bold	/Courier-Bold findfont def/Italic /Courier-Oblique findfont def/MathPictureStart {	/Mimatrix	 matrix currentmatrix	def	gsave	newpath	Mleft	Mbottom	translate	/Mtmatrix	matrix currentmatrix	def	Plain	Mfontsize scalefont	setfont	0 setgray	0 setlinewidth} bind def/MathPictureEnd {	grestore} bind def/MathSubStart { 	     Momatrix        Mgmatrix Mtmatrix        Mleft Mbottom        Mwidth Mheight        9 -2 roll        moveto        Mtmatrix setmatrix        currentpoint        Mgmatrix setmatrix        11 -2 roll        moveto        Mtmatrix setmatrix        currentpoint        2 copy translate        /Mtmatrix matrix currentmatrix def        /Mleft 0 def        /Mbottom 0 def        3 -1 roll        exch sub        /Mheight exch def        sub        /Mwidth exch def} bind def/MathSubEnd {        /Mheight exch def        /Mwidth exch def        /Mbottom exch def        /Mleft exch def        /Mtmatrix exch def        dup setmatrix        /Mgmatrix exch def	      /Momatrix exch def} bind def/Mdot {	moveto	0 0 rlineto	stroke} bind def/Mtetra {	moveto	lineto	lineto	lineto	fill} bind def/Metetra {	moveto	lineto	lineto	lineto	closepath	gsave	fill	grestore	0 setgray	stroke} bind def/Mistroke {	flattenpath	0 0 0	{	4 2 roll	pop pop	}	{	4 -1 roll	2 index	sub dup mul	4 -1 roll	2 index	sub dup mul	add sqrt	4 -1 roll	add	3 1 roll	}	{	stop	}	{	stop	}	pathforall	pop pop	currentpoint	stroke	moveto	currentdash	3 -1 roll	add	setdash} bind def/Mfstroke {	stroke	currentdash	pop 0	setdash} bind def/Mrotsboxa {	gsave	dup	/Mrot	exch def	Mrotcheck	Mtmatrix	dup	setmatrix	7 1 roll	4 index	4 index	translate	rotate	3 index	-1 mul	3 index	-1 mul	translate	/Mtmatrix	matrix	currentmatrix	def	grestore	Msboxa	3  -1 roll	/Mtmatrix	exch def	/Mrot	0 def} bind def/Msboxa {	newpath	5 -1 roll	Mvboxa	pop	Mboxout	6 -1 roll	5 -1 roll	4 -1 roll	Msboxa1	5 -3 roll	Msboxa1	Mboxrot	[	7 -2 roll	2 copy	[	3 1 roll	10 -1 roll	9 -1 roll	]	6 1 roll	5 -2 roll	]} bind def/Msboxa1 {	sub	2 div	dup	2 index	1 add	mul	3 -1 roll	-1 add	3 -1 roll	mul} bind def/Mvboxa	{	Mfixwid	{	Mvboxa1	}	{	dup	Mwidthcal	0 exch	{	add	}	forall	exch	Mvboxa1	4 index	7 -1 roll	add	4 -1 roll	pop	3 1 roll	}	ifelse} bind def/Mvboxa1 {	gsave	newpath	[ true	3 -1 roll	{	Mbbox	5 -1 roll	{	0	5 1 roll	}	{	7 -1 roll	exch sub	(m) stringwidth pop	.3 mul	sub	7 1 roll	6 -1 roll	4 -1 roll	Mmin	3 -1 roll	5 index	add	5 -1 roll	4 -1 roll	Mmax	4 -1 roll	}	ifelse	false	}	forall	{ stop } if	counttomark	1 add	4 roll	]	grestore} bind def/Mbbox {	0 0 moveto	false charpath	flattenpath	pathbbox	newpath} bind def/Mmin {	2 copy	gt	{ exch } if	pop} bind def/Mmax {	2 copy	lt	{ exch } if	pop} bind def/Mrotshowa {	dup	/Mrot	exch def	Mrotcheck	Mtmatrix	dup	setmatrix	7 1 roll	4 index	4 index	translate	rotate	3 index	-1 mul	3 index	-1 mul	translate	/Mtmatrix	matrix	currentmatrix	def	Mgmatrix setmatrix	Mshowa	/Mtmatrix	exch def	/Mrot 0 def} bind def/Mshowa {	4 -2 roll	moveto	2 index	Mtmatrix setmatrix	Mvboxa	7 1 roll	Mboxout	6 -1 roll	5 -1 roll	4 -1 roll	Mshowa1	4 1 roll	Mshowa1	rmoveto	currentpoint	Mfixwid	{	Mshowax	}	{	Mshoway	}	ifelse	pop pop pop pop	Mgmatrix setmatrix} bind def/Mshowax {	0 1        4 index length        -1 add        {        2 index        4 index        2 index        get        3 index        add        moveto        4 index        exch get        show        } for} bind def/Mshoway {        3 index        Mwidthcal        5 1 roll	0 1	4 index length	-1 add	{	2 index	4 index	2 index	get	3 index	add	moveto	4 index	exch get	[	6 index	aload	length	2 add	-1 roll	{	pop	Strform	stringwidth	pop	neg	exch	add	0 rmoveto	}	exch	kshow	cleartomark	} for	pop} bind def/Mwidthcal {	[	exch	{	Mwidthcal1	}	forall	]	[	exch	dup	Maxlen	-1 add	0 1	3 -1 roll	{	[	exch	2 index	{	1 index	Mget	exch	}	forall	pop	Maxget	exch	}	for	pop	]	Mreva} bind def/Mreva	{	[	exch	aload	length	-1 1	{1 roll}	for	]} bind def/Mget	{	1 index	length	-1 add	1 index	ge	{	get	}	{	pop pop	0	}	ifelse} bind def/Maxlen	{	[	exch	{	length	}	forall	Maxget} bind def/Maxget	{	counttomark	-1 add	1 1	3 -1 roll	{	pop	Mmax	}	for	exch	pop} bind def/Mwidthcal1 {	[	exch	{	Strform	stringwidth	pop	}	forall	]} bind def/Strform {	/tem (x) def	tem 0	3 -1 roll	put	tem} bind def/Mshowa1 {	2 copy	add	4 1 roll	sub	mul	sub	-2 div} bind def/MathScale {	Mwidth	Mheight	Mlp	translate	scale	/yscale exch def	/ybias exch def	/xscale exch def	/xbias exch def	/Momatrix	xscale yscale matrix scale	xbias ybias matrix translate	matrix concatmatrix def	/Mgmatrix	matrix currentmatrix	def} bind def/Mlp {	3 copy	Mlpfirst	{	Mnodistort	{	Mmin	dup	} if	4 index	2 index	2 index	Mlprun	11 index	11 -1 roll	10 -4 roll	Mlp1	8 index	9 -5 roll	Mlp1	4 -1 roll	and	{ exit } if	3 -1 roll	pop pop	} loop	exch	3 1 roll	7 -3 roll	pop pop pop} bind def/Mlpfirst {	3 -1 roll	dup length	2 copy	-2 add	get	aload	pop pop pop	4 -2 roll	-1 add	get	aload	pop pop pop	6 -1 roll	3 -1 roll	5 -1 roll	sub	dup /MsaveAx exch def	div	4 1 roll	exch sub	dup /MsaveAy exch def	div} bind def/Mlprun {	2 copy	4 index	0 get	dup	4 1 roll	Mlprun1	3 copy	8 -2 roll	9 -1 roll	{	3 copy	Mlprun1	3 copy	11 -3 roll	/gt Mlpminmax	8 3 roll	11 -3 roll	/lt Mlpminmax	8 3 roll	} forall	pop pop pop pop	3 1 roll	pop pop	aload pop	5 -1 roll	aload pop	exch	6 -1 roll	Mlprun2	8 2 roll	4 -1 roll	Mlprun2	6 2 roll	3 -1 roll	Mlprun2	4 2 roll	exch	Mlprun2	6 2 roll} bind def/Mlprun1 {	aload pop	exch	6 -1 roll	5 -1 roll	mul add	4 -2 roll	mul	3 -1 roll	add} bind def/Mlprun2 {	2 copy	add 2 div	3 1 roll	exch sub} bind def/Mlpminmax {	cvx	2 index	6 index	2 index	exec	{	7 -3 roll	4 -1 roll	} if	1 index	5 index	3 -1 roll	exec	{	4 1 roll	pop	5 -1 roll	aload	pop pop	4 -1 roll	aload pop	[	8 -2 roll	pop	5 -2 roll	pop	6 -2 roll	pop	5 -1 roll	]	4 1 roll	pop	}	{	pop pop pop	} ifelse} bind def/Mlp1 {	5 index	3 index	sub	5 index	2 index mul	1 index	le	1 index	0 le	or	dup	not	{	1 index	3 index	div	.99999 mul	8 -1 roll	pop	7 1 roll	}	if	8 -1 roll	2 div	7 -2 roll	pop sub	5 index	6 -3 roll	pop pop	mul sub	exch} bind def/intop 0 def/inrht 0 def/inflag 0 def/outflag 0 def/xadrht 0 def/xadlft 0 def/yadtop 0 def/yadbot 0 def/Minner {	outflag	1	eq	{	/outflag 0 def	/intop 0 def	/inrht 0 def	} if	5 index	gsave	Mtmatrix setmatrix	Mvboxa pop	grestore	3 -1 roll	pop	dup	intop	gt	{	/intop	exch def	}	{ pop }	ifelse	dup	inrht	gt	{	/inrht	exch def	}	{ pop }	ifelse	pop	/inflag	1 def} bind def/Mouter {	/xadrht 0 def	/xadlft 0 def	/yadtop 0 def	/yadbot 0 def	inflag	1 eq	{	dup	0 lt	{	dup	intop	mul	neg	/yadtop	exch def	} if	dup	0 gt	{	dup	intop	mul	/yadbot	exch def	}	if	pop	dup	0 lt	{	dup	inrht	mul	neg	/xadrht	exch def	} if	dup	0 gt	{	dup	inrht	mul	/xadlft	exch def	} if	pop	/gutflag 1 def	}	{ pop pop}	ifelse	/inflag 0 def	/inrht 0 def	/intop 0 def} bind def/Mboxout {	outflag	1	eq	{	4 -1	roll	xadlft	leadjust	add	sub	4 1 roll	3 -1	roll	yadbot	leadjust	add	sub	3 1	roll	exch	xadrht	leadjust	add	add	exch	yadtop	leadjust	add	add	/outflag 0 def	/xadlft 0 def	/yadbot 0 def	/xadrht 0 def	/yadtop 0 def	} if} bind def/leadjust {	(m) stringwidth pop	.5 mul} bind def/Mrotcheck {	dup	90	eq	{	yadbot	/yadbot	xadrht	def	/xadrht	yadtop	def	/yadtop	xadlft	def	/xadlft	exch	def	}	if	dup	cos	1 index	sin	Checkaux	dup	cos	1 index	sin neg	exch	Checkaux	3 1 roll	pop pop} bind def/Checkaux {	4 index	exch	4 index	mul	3 1 roll	mul add	4 1 roll} bind def/Mboxrot {	Mrot	90 eq	{	brotaux	4 2	roll	}	if	Mrot	180 eq	{	4 2        roll	brotaux	4 2	roll	brotaux	}	if	Mrot	270 eq	{	4 2	roll	brotaux	}	if} bind def/brotaux {	neg	exch	neg} bind def/Mabsproc {        0        matrix defaultmatrix        dtransform idtransform        dup mul exch        dup mul        add sqrt} bind def/Mabswid {        Mabsproc        setlinewidth} bind def/Mabsdash {        exch        [        exch        {        Mabsproc        }        forall        ]        exch        setdash} bind def/MBeginOrig { Momatrix concat} bind def/MEndOrig { Mgmatrix setmatrix} bind def/sampledsound where{ pop}{ /sampledsound {exchpopexch5 1 rollmul4 idivmul2 idivexch popexch/Mtempproc exch def{ Mtempproc pop }repeat} bind def} ifelse% Here are the short operators/g { setgray} bind def/k { setcmykcolor} bind def/m { moveto} bind def/p { gsave} bind def/r { setrgbcolor} bind def/w { setlinewidth} bind def/C { curveto} bind def/F { fill} bind def/L { lineto} bind def/P { grestore} bind def/s { stroke} bind def/MFill {	0 0 		moveto	Mwidth 0 	lineto	Mwidth Mheight 	lineto	0 Mheight 	lineto	fill} bind def/MPlotRegion {	3 index	Mwidth mul	2 index	Mheight mul	translate	exch sub	Mheight mul	/Mheight	exch def	exch sub	Mwidth mul	/Mwidth	exch def} bind def/Mcharproc{  	currentfile  	(x)  	readhexstring  	pop  	0 get  	exch 	div} bind def/Mshadeproc{	dup	3 1	roll	{	dup	Mcharproc	3 1	roll	} repeat	1 eq	{	setgray	}	{	3 eq	{	setrgbcolor	}	{	setcmykcolor	} ifelse	} ifelse} bind def/Mrectproc{	3 index	2 index	moveto	2 index	3 -1	roll	lineto	dup	3 1	roll	lineto	lineto	fill} bind def/Mcolorimage{	7 1	roll	pop	pop	matrix	invertmatrix	concat	2 exch exp	1 sub	3 1 roll	1 1	2 index	{	1 1	4 index	{	dup	1 sub	exch	2 index	dup	1 sub	exch	7 index	9 index	Mshadeproc	Mrectproc	} for	pop	} for	pop pop pop pop} bind def/Mimage{	pop	matrix	invertmatrix	concat	2 exch exp	1 sub	3 1 roll	1 1	2 index	{	1 1	4 index	{	dup	1 sub 	exch	2 index	dup	1 sub	exch	7 index	Mcharproc	setgray	Mrectproc	} for	pop	} for	pop pop pop} bind def/Mnodistort true def/colorimage where{ pop /Mcolorimage {colorimage} bind def /Mimage {image} bind def}{/colorimage {Mcolorimage} bind def} ifelse1.000000 1.000000 scale0.000000 267.500000 translate1.000000 -1.000000 scale-0.000000 -0.000000 translate/Mleft		0.000000 def/Mbottom	0.000000 def/Mwidth		433.000000 def/Mheight	267.500000 def0 setgray0 setlinewidth/Courier findfont 12 scalefont setfont/Mfontsize 12 def/Plain /Courier findfont def0 Mbottom Mheight add 0.01 mul Mheight add translate1 -1 scale%!%%Creator: Mathematica%%AspectRatio: .61803 MathPictureStart/Mabs {Mgmatrix idtransformMtmatrix dtransform} bind def/Mabsadd { Mabs3 -1 roll add3 1 roll addexch } bind def%% Graphics/Courier findfont 10  scalefont  setfont% Scaling calculations0.0238095 0.0952381 0.0147151 0.823695 [[.21429 .00222 -3 -9 ][.21429 .00222 3 0 ][.40476 .00222 -3 -9 ][.40476 .00222 3 0 ][.59524 .00222 -3 -9 ][.59524 .00222 3 0 ][.78571 .00222 -3 -9 ][.78571 .00222 3 0 ][.97619 .00222 -6 -9 ][.97619 .00222 6 0 ][1.025 .01472 0 -6.5 ][1.025 .01472 10 6.5 ][.01131 .09708 -18 -4.5 ][.01131 .09708 0 4.5 ][.01131 .17945 -18 -4.5 ][.01131 .17945 0 4.5 ][.01131 .26182 -18 -4.5 ][.01131 .26182 0 4.5 ][.01131 .34419 -18 -4.5 ][.01131 .34419 0 4.5 ][.01131 .42656 -18 -4.5 ][.01131 .42656 0 4.5 ][.01131 .50893 -18 -4.5 ][.01131 .50893 0 4.5 ][.01131 .5913 -18 -4.5 ][.01131 .5913 0 4.5 ][.02381 .64303 -35 0 ][.02381 .64303 35 13 ][ 0 0 0 0 ][ 1 .61803 0 0 ]] MathScale% Start of Graphics1 setlinecap1 setlinejoinnewpath0 g.25 Mabswid[ ] 0 setdash.21429 .01472 m.21429 .02097 Ls[(2)] .21429 .00222 0 1 Mshowa.40476 .01472 m.40476 .02097 Ls[(4)] .40476 .00222 0 1 Mshowa.59524 .01472 m.59524 .02097 Ls[(6)] .59524 .00222 0 1 Mshowa.78571 .01472 m.78571 .02097 Ls[(8)] .78571 .00222 0 1 Mshowa.97619 .01472 m.97619 .02097 Ls[(10)] .97619 .00222 0 1 Mshowa.125 Mabswid.07143 .01472 m.07143 .01847 Ls.11905 .01472 m.11905 .01847 Ls.16667 .01472 m.16667 .01847 Ls.2619 .01472 m.2619 .01847 Ls.30952 .01472 m.30952 .01847 Ls.35714 .01472 m.35714 .01847 Ls.45238 .01472 m.45238 .01847 Ls.5 .01472 m.5 .01847 Ls.54762 .01472 m.54762 .01847 Ls.64286 .01472 m.64286 .01847 Ls.69048 .01472 m.69048 .01847 Ls.7381 .01472 m.7381 .01847 Ls.83333 .01472 m.83333 .01847 Ls.88095 .01472 m.88095 .01847 Ls.92857 .01472 m.92857 .01847 Ls.25 Mabswid0 .01472 m1 .01472 Lsgsave1.025 .01472 -61 -10.5 Mabsadd m1 1 Mabs scalecurrentpoint translate0 21 translate 1 -1 scale63.000000 14.000000 moveto%%IncludeResource: font Courier%%IncludeFont: Courier/Courier findfont 10.000000 scalefont[1 0 0 -1 0 0 ] makefont setfont0.000000 0.000000 0.000000 setrgbcolor0.000000 0.000000 rmoveto63.000000 14.000000 moveto%%IncludeResource: font Courier%%IncludeFont: Courier/Courier findfont 10.000000 scalefont[1 0 0 -1 0 0 ] makefont setfont0.000000 0.000000 0.000000 setrgbcolor(W) show69.000000 14.000000 moveto%%IncludeResource: font Courier%%IncludeFont: Courier/Courier findfont 10.000000 scalefont[1 0 0 -1 0 0 ] makefont setfont0.000000 0.000000 0.000000 setrgbcolor0.000000 0.000000 rmoveto1.000000 setlinewidth%%DocumentNeededResources: font Courier%%DocumentSuppliedResources:%%DocumentNeededFonts: Courier%%DocumentSuppliedFonts:%%DocumentFonts: font Couriergrestore.02381 .09708 m.03006 .09708 Ls[(0.1)] .01131 .09708 1 0 Mshowa.02381 .17945 m.03006 .17945 Ls[(0.2)] .01131 .17945 1 0 Mshowa.02381 .26182 m.03006 .26182 Ls[(0.3)] .01131 .26182 1 0 Mshowa.02381 .34419 m.03006 .34419 Ls[(0.4)] .01131 .34419 1 0 Mshowa.02381 .42656 m.03006 .42656 Ls[(0.5)] .01131 .42656 1 0 Mshowa.02381 .50893 m.03006 .50893 Ls[(0.6)] .01131 .50893 1 0 Mshowa.02381 .5913 m.03006 .5913 Ls[(0.7)] .01131 .5913 1 0 Mshowa.125 Mabswid.02381 .03119 m.02756 .03119 Ls.02381 .04766 m.02756 .04766 Ls.02381 .06414 m.02756 .06414 Ls.02381 .08061 m.02756 .08061 Ls.02381 .11356 m.02756 .11356 Ls.02381 .13003 m.02756 .13003 Ls.02381 .14651 m.02756 .14651 Ls.02381 .16298 m.02756 .16298 Ls.02381 .19593 m.02756 .19593 Ls.02381 .2124 m.02756 .2124 Ls.02381 .22888 m.02756 .22888 Ls.02381 .24535 m.02756 .24535 Ls.02381 .2783 m.02756 .2783 Ls.02381 .29477 m.02756 .29477 Ls.02381 .31125 m.02756 .31125 Ls.02381 .32772 m.02756 .32772 Ls.02381 .36067 m.02756 .36067 Ls.02381 .37714 m.02756 .37714 Ls.02381 .39361 m.02756 .39361 Ls.02381 .41009 m.02756 .41009 Ls.02381 .44304 m.02756 .44304 Ls.02381 .45951 m.02756 .45951 Ls.02381 .47598 m.02756 .47598 Ls.02381 .49246 m.02756 .49246 Ls.02381 .52541 m.02756 .52541 Ls.02381 .54188 m.02756 .54188 Ls.02381 .55835 m.02756 .55835 Ls.02381 .57483 m.02756 .57483 Ls.02381 .60778 m.02756 .60778 Ls.25 Mabswid.02381 0 m.02381 .61803 Lsgsave.02381 .64303 -96 -4 Mabsadd m1 1 Mabs scalecurrentpoint translate0 21 translate 1 -1 scale63.000000 14.000000 moveto%%IncludeResource: font Courier%%IncludeFont: Courier/Courier findfont 10.000000 scalefont[1 0 0 -1 0 0 ] makefont setfont0.000000 0.000000 0.000000 setrgbcolor0.000000 0.000000 rmoveto63.000000 14.000000 moveto%%IncludeResource: font Courier%%IncludeFont: Courier/Courier findfont 10.000000 scalefont[1 0 0 -1 0 0 ] makefont setfont0.000000 0.000000 0.000000 setrgbcolor(Saving) show105.000000 14.000000 moveto(Rate) show129.000000 14.000000 moveto%%IncludeResource: font Courier%%IncludeFont: Courier/Courier findfont 10.000000 scalefont[1 0 0 -1 0 0 ] makefont setfont0.000000 0.000000 0.000000 setrgbcolor0.000000 0.000000 rmoveto1.000000 setlinewidth%%DocumentNeededResources: font Courier%%DocumentSuppliedResources:%%DocumentNeededFonts: Courier%%DocumentSuppliedFonts:%%DocumentFonts: font Couriergrestore0 0 m1 0 L1 .61803 L0 .61803 Lclosepathclipnewpath.5 Mabswid.02476 .01472 m.06336 .01472 L.08345 .01472 L.09408 .01472 L.10545 .01472 L.11096 .01472 L.11367 .01472 L.11617 .01472 L.11734 .01472 L.11844 .01472 L.11958 .01778 L.12084 .02488 L.12592 .05181 L.14498 .13393 L.16521 .19836 L.18372 .2441 L.22339 .31599 L.26154 .36472 L.30215 .40362 L.34124 .43291 L.38278 .45808 L.4228 .47816 L.46132 .49461 L.50228 .50972 L.54173 .52243 L.57966 .53328 L.62004 .54362 L.65891 .55259 L.70023 .56123 L.74004 .56881 L.77833 .57551 L.81907 .58209 L.8583 .58796 L.89601 .59321 L.93617 .59844 L.97482 .60316 L.97619 .60332 Ls% End of GraphicsMathPictureEnd%%PSTrailerendgrestore%%EPS Trailer